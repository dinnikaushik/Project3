version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      to:
        default: "all"
        type: string
    steps:
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2      
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws configure set default.region us-west-2
              input=<<parameters.to>>
              if [ $input == FE ]   
              then
                aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                aws cloudformation delete-stack \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              elif [ $input == backend ] 
              then
                aws cloudformation delete-stack \
                --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              else 
                aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                aws cloudformation delete-stack \
                --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
              fi
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      event:
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            if ((curl -s http://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-2.amazonaws.com/ | grep "Hello"));
            then
            # SUCCESS = 1
            # if(( $SUCCESS==1 )); 
            # then
              cd ./project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            fi
  print_workflow_id:
    parameters:
      id:
        type: string
    steps:
      - run: echo << parameters.id >>    
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      # Restore from cache
      - run:  
          name: Test front-end
          command: |
            cd frontend
            sudo apt install nodejs
            npm install
            npm run test
           
      # Your job code here
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      # Restore from cache
      - run:  
          name: Test back-end
          command: |
            cd backend
            sudo apt install nodejs
            npm install
            npm run test
            # Your code here
      # Your job code here
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      # Restore from cache
      - run:  
          name: Scan front-end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      # Your job code here
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      # Restore from cache
      - run:  
          name: Scan back-end
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      # Your job code here
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Install gzip tar
          command: |
                yum -y install tar
                yum -y install gzip
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2            
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity-backend" \
              --output text >> backend_url.txt
              curl  -d $(cat backend_url.txt) https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/backendurl_${CIRCLE_WORKFLOW_ID:0:7}
              curl https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/backendurl_${CIRCLE_WORKFLOW_ID:0:7} >> ./.circleci/ansible/inventory.txt
                   
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment 
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      # Checkout code from git
      - add_ssh_keys:
          fingerprints: ["72:be:9e:fb:18:14:95:08:bb:4b:b7:76:e9:52:ac:11"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
           pip install --upgrade pip
           pip install awscli
           apk add ansible
      - run:
          name: Cat inventory
          command: |
            cd .circleci/ansible/
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook configure-server.yml -i inventory.txt
      # - run:
      #     name: Node Exporter Config
      #     command: |
      #       cd .circleci/ansible/roles/configure-prometheus-node-exporter/tasks
      #       ansible-playbook main.yml -i ../../../../inventory.txt
      - destroy-environment
  run-migrations:
    # Docker image here that supports NodeJS
    docker:
    - image: circleci/node:13.8.0
    # <<: *defaults-node
    steps:
    # Checkout code from git
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
          working_directory: ./
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
     
      - run:
          name: check API_URL variable
          command: |
            pwd
            cd backend && ls -la 
            echo $API_URL
            cd .. && ls -la
            cd frontend
            cat .env
      - run:
          name: Run DB migrations
          working_directory: ./
          command: |
            # Your code here
            pwd
            cd backend && ls -la
            npm -v
            node -v
            npm i 
            npm audit fix
            npm i migrations@1.0.3
          
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            
            sudo npm run migrations > migration.txt
            export migration_status=$(cat migration.txt | grep -c "has been executed successfully")
           
            
            echo $migration_status > migration_status.txt
            cat migration.txt
            cat migration_status.txt
      - run:
          name: Check migration results 
          command: |
            # Your code here
            pwd & ls -la
            cd backend
            pwd & ls -la
            cat migration.txt
            if grep -q "has been executed successfully." migration.txt;\
            then echo "0" > migr_stat;\
            else echo "1" > migr_stat;\
            fi
       
            # then
            #   echo "0" > migr_stat
            # else
            #   echo "1" > migr_stat
              
              # curl -H "Content-Type: text/plain" -H \
              # "token: 130ac090-6749-4202-95d0-c1746a2dca81" --request PUT --data "1" \
              # https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            # fi
            
      - persist_to_workspace:
          root: ./
          paths: 
            - .circleci/ansible/inventory3.txt
            - .circleci/ansible/api_url.txt
            - backend/migration.txt
            - backend/migration_status.txt
            - backend/migr_stat

     # Here's where you will add some code to rollback on failure      
     # - destroy-environment:
     #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
     #     event: on_fail
     # - revert-migrations:
     #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
     #     event: on_fail
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            
            cd frontend
            yum install -y curl tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2  
      - run:
          name: Get backend url and setup environment variables
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${BACKEND_IP}"
            echo "${API_URL}"
            echo ENVIRONMENT=production > "frontend/.env"
            echo API_URL=${API_URL} >> "frontend/.env"
            cat frontend/.env
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2      
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist 
      - destroy-environment:
          to: "FE"
  deploy-backend: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["72:be:9e:fb:18:14:95:08:bb:4b:b7:76:e9:52:ac:11"]

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |  
            pip install --upgrade pip
            pip install awscli
            apk add --update nodejs npm ansible zip
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2        
      - run:
          name: Deploy backend
          command: |
              cd backend
              apk add --update nodejs-npm
              apk add --update npm
              npm install
              npm run build
              echo build successful
      - run:
          name: Add env vars
          command: |
              echo ENVIROMENT=production > "backend/dist/.env"
              echo TYPEORM_CONNECTION=postgres >> "backend/dist/.env"
              echo TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js} >> "backend/dist/.env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/dist/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/dist/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/dist/.env"
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/dist/.env"
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/dist/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/dist/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/dist/.env"
      - run:
          name: Configure server
          command: |    
              cd /root/project/backend/dist
              tar czf dist.tar.gz .
              mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
              mv dist.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
              cd /root/project/backend/node_modules
              tar czf node_modules.tar.gz .
              mv node_modules.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: Run Ansible
          command: |
            cd /root/project/.circleci/ansible
              echo "Contents  of the inventory.txt file is _____________________________________>>"
              cat inventory.txt
              ansible-playbook deploy-backend.yml -i inventory.txt
  smoke-test:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install --upgrade pip
            pip install awscli
      - run:
          name: BE Smoke Test
          command: |
            BACKEND_IP=$(curl https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/backendurl_${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: FE smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            echo ${URL}
      - destroy-environment
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [scan-frontend, scan-backend]
      - deploy-frontend:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
